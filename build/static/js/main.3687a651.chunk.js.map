{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","emails","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardComponent","map","user","i","components_Card","key","email","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAceA,EAZF,SAAAC,GAAwB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,OAAQC,EAAQH,EAARG,GAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,mDACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAK,SAASC,IAAG,wBAAAC,OAA4BP,EAA5B,kBACtBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCWCS,EAhBE,SAAAX,GAAc,IAAZY,EAAYZ,EAAZY,OACXC,EAAgBD,EAAOE,IAAI,SAACC,EAAMC,GACtC,OAAQZ,EAAAC,EAAAC,cAACW,EAAD,CACPC,IAAOF,EACNb,GAAMS,EAAOI,GAAGb,GACfF,KAAQW,EAAOI,GAAGf,KACjBC,OAAUU,EAAOI,GAAGG,UAE1B,OACIf,EAAAC,EAAAC,cAAA,WACGO,ICCMO,EAZG,SAAApB,GAAkCA,EAA/BqB,YAA+B,IAAlBC,EAAkBtB,EAAlBsB,aAChC,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAY,mCAClBgB,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCEJI,EARA,SAACC,GACd,OACEvB,EAAAC,EAAAC,cAAA,OAAKsB,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WCmDEC,qBA9Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcFI,eAAiB,SAACC,GAChBR,EAAKS,SAAS,CAAEtB,YAAaqB,EAAME,OAAOC,SAd1CX,EAAKY,MAAQ,CACXlC,OAAQ,GACRS,YAAa,IAJHa,mFAQM,IAAAa,EAAAV,KAClBW,MAAM,8CACLC,KAAK,SAAAC,GAAc,OAAOA,EAASC,SACnCF,KAAK,SAAAG,GAAWL,EAAKJ,SAAS,CAAE/B,OAAQwC,uCAQlC,IAAAC,EACyBhB,KAAKS,MAA7BlC,EADDyC,EACCzC,OAAQS,EADTgC,EACShC,YACViC,EAAiB1C,EAAO2C,OAAO,SAAAC,GACnC,OAAOA,EAAMvD,KAAKwD,cAAcC,SAASrC,EAAYoC,iBAIvD,OAAI7C,EAAO+C,OAKPvD,EAAAC,EAAAC,cAAA,OAAKC,UAAY,MACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,MAAhB,gBAEAH,EAAAC,EAAAC,cAACsD,EAAD,CAAWtC,aAAgBe,KAAKI,iBAEhCrC,EAAAC,EAAAC,cAACuD,EAAD,KACEzD,EAAAC,EAAAC,cAACwD,EAAD,CAAUlD,OAAU0C,MAVnBlD,EAAAC,EAAAC,cAAA,4BA7BMyD,cCICC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECRNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAAUC,SAASC,eAAe,SDuH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.3687a651.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, emails, id}) => {\n  return (\n    <div className = \"tc bg-light-green dib br3 pa3 ma2 grow shadow-5\">\n      <img alt= \"robots\" src = {`https://robohash.org/${id}test?200x200`} />\n      <div>\n          <h2>{name}</h2>\n          <p>{emails}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n  const cardComponent = robots.map((user, i) => {\n    return (<Card\n     key = {i}\n      id = {robots[i].id}\n       name = {robots[i].name}\n        emails = {robots[i].email}/>)\n  })\n  return(\n      <div>\n        {cardComponent}\n      </div>\n\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange}) => {\n  return (\n    <div className = 'pa2'>\n      <input className = \"pa3 ba b--green bg-lightest-blue\"\n       type = \"search\"\n       placeholder = \"search robots\"\n       onChange = {searchChange}\n       />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style = {{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;\n","import React, { Component} from 'react';\nimport CardList from '../components/CardList';\n// import { robots } from './robots';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n\nclass  App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => { return response.json();})\n    .then(users => { this.setState({ robots: users})});\n  }\n\n// This is important part for using 'this'\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value});\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n\n    // For Loading Bar!\n    if(!robots.length) {\n      return <h1>Loading</h1>\n    }\n    else{\n      return (\n        <div className = \"tc\">\n          <h1 className = \"f1\">Robo Friends</h1>\n\n          <SearchBox searchChange = {this.onSearchChange} />\n\n          <Scroll>\n            <CardList robots = {filteredRobots}/>\n          </Scroll>\n\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport App from './containers/App'\n// import CardList from './CardList'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import { robots } from './robots'\n\nReactDOM.render(<App / >, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}